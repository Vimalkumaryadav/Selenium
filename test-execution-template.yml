# Template for test execution steps
parameters:
- name: testSuite
  type: string
- name: jobName
  type: string

steps:
# Cache Maven dependencies to improve build performance
- task: Cache@2
  displayName: 'Cache Maven packages'
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
      maven
    path: $(MAVEN_CACHE_FOLDER)

# Setup Java environment
- task: JavaToolInstaller@0
  displayName: 'Setup Java 11'
  inputs:
    versionSpec: '11'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

# Install Chrome browser (required for Selenium tests)
- script: |
    sudo apt-get update
    sudo apt-get install -y google-chrome-stable
  displayName: 'Install Chrome Browser'

# Set display for headless browser testing
- script: |
    export DISPLAY=:99
    Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  displayName: 'Start Virtual Display'

# Compile the project
- task: Maven@3
  displayName: 'Compile Project'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    goals: 'clean compile'
    options: '-DskipTests=true'

# Run tests with specific TestNG suite
- task: Maven@3
  displayName: 'Run ${{ parameters.jobName }} Tests'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'test'
    options: |
      -Dsurefire.suiteXmlFiles=src/test/resources/testng-suites/${{ parameters.testSuite }}
      -Dmaven.test.failure.ignore=true
      -Dwebdriver.chrome.driver=/usr/bin/google-chrome
      -Dheadless=true

# Publish test results to Azure DevOps
- task: PublishTestResults@2
  displayName: 'Publish ${{ parameters.jobName }} Test Results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    mergeTestResults: true
    testRunTitle: '${{ parameters.jobName }} Tests - $(Build.BuildNumber)'
    failTaskOnFailedTests: false

# Publish Extent HTML reports
- task: PublishHtmlReport@1
  displayName: 'Publish ${{ parameters.jobName }} HTML Report'
  condition: succeededOrFailed()
  inputs:
    reportDir: '$(System.DefaultWorkingDirectory)/test-output/extent-reports'
    tabName: '${{ parameters.jobName }} Extent Report'

# Publish code coverage results (if available)
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/target/site/jacoco'
    failIfCoverageEmpty: false

# Archive all test artifacts
- task: PublishPipelineArtifact@1
  displayName: 'Publish ${{ parameters.jobName }} Test Artifacts'
  condition: succeededOrFailed()
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/test-output'
    artifactName: '${{ parameters.jobName }}-test-reports-$(Build.BuildNumber)'
    publishLocation: 'pipeline'

# Archive logs for troubleshooting
- task: PublishPipelineArtifact@1
  displayName: 'Publish ${{ parameters.jobName }} Logs'
  condition: failed()
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/logs'
    artifactName: '${{ parameters.jobName }}-logs-$(Build.BuildNumber)'
    publishLocation: 'pipeline'

# Clean up screenshots directory size (keep only failed test screenshots)
- script: |
    if [ -d "$(System.DefaultWorkingDirectory)/test-output/screenshots" ]; then
      find $(System.DefaultWorkingDirectory)/test-output/screenshots -name "*PASSED*" -delete || true
      echo "Cleaned up passed test screenshots to save space"
    fi
  displayName: 'Clean Up Screenshots'
  condition: succeededOrFailed()