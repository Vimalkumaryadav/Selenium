# Selenium TestNG Framework - Optimized Azure DevOps Pipeline
# Consolidated configuration optimized for free tier with minimal resource consumption

trigger:
- main

variables:
  # Maven optimization for Windows
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)\.m2\repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN'
  # Chrome path for Windows (will be detected dynamically)
  CHROME_PATH: 'C:\Program Files\Google\Chrome\Application\chrome.exe'

# Self-hosted agent configuration - Selenium Pool (Windows)
# No capability demands - tools will be auto-installed
pool:
  name: 'Selenium Pool'
  demands:
  - agent.os -equals Windows_NT  # Only require Windows OS
  # Removed maven demand - will use Maven installer task instead

jobs:
- job: SeleniumTests
  displayName: 'Selenium Framework CI/CD'
  timeoutInMinutes: 45  # Reduced from 60 to minimize free tier consumption
  strategy:
    maxParallel: 1  # Essential for free tier - DO NOT CHANGE
  
  steps:
  # Ensure Java 17 is available (auto-detect or install)
  - task: JavaToolInstaller@0
    displayName: 'Setup Java 17'
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
    continueOnError: true  # Continue if Java 17 already available

  # Install Maven automatically (bypasses NetworkService account issues)
  - powershell: |
      Write-Host "=== Maven Installation Check ==="
      
      # Check if Maven is in PATH for NetworkService account
      try {
          $mavenVersion = mvn -version 2>&1
          Write-Host "Maven found: $mavenVersion"
      } catch {
          Write-Host "Maven not found in PATH for NetworkService account"
          Write-Host "Installing Maven to accessible location..."
          
          # Download and install Maven to agent directory
          $mavenUrl = "https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip"
          $agentDir = "C:\agent"
          $mavenZip = "$agentDir\maven.zip"
          $mavenDir = "$agentDir\maven"
          
          if (-not (Test-Path $mavenDir)) {
              Write-Host "Downloading Maven..."
              Invoke-WebRequest -Uri $mavenUrl -OutFile $mavenZip
              
              Write-Host "Extracting Maven..."
              Expand-Archive -Path $mavenZip -DestinationPath $agentDir -Force
              
              # Rename to simpler path
              $extractedDir = Get-ChildItem "$agentDir\apache-maven-*" | Select-Object -First 1
              if ($extractedDir) {
                  Rename-Item $extractedDir.FullName $mavenDir
              }
              
              Remove-Item $mavenZip -Force
              Write-Host "Maven installed to: $mavenDir"
          }
          
          # Add Maven to PATH for this session
          $env:PATH = "$mavenDir\bin;$env:PATH"
          Write-Host "Added Maven to PATH: $mavenDir\bin"
          
          # Verify installation
          & "$mavenDir\bin\mvn.cmd" -version
      }
    displayName: 'Setup Maven for NetworkService Account'

  # OPTIMIZATION: Aggressive Maven dependency caching
  - task: Cache@2
    displayName: 'Cache Maven Dependencies'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml | "$(Build.SourceVersion)"'
      restoreKeys: |
        maven | "$(Agent.OS)" | **/pom.xml
        maven | "$(Agent.OS)"
      path: $(MAVEN_CACHE_FOLDER)
  
  # Enhanced agent prerequisites verification with error handling
  - script: |
      echo === Agent Environment Verification ===
      echo Agent Name: $(Agent.Name)
      echo Agent OS: $(Agent.OS)
      echo Agent Version: $(Agent.Version)
      echo User Context: %USERNAME%
      echo.
      
      echo === Java Detection ===
      java -version 2>nul && (
        echo Java found successfully
        echo JAVA_HOME: %JAVA_HOME%
      ) || (
        echo WARNING: Java not found in PATH
        echo Checking common Java locations...
        if exist "C:\Program Files\Eclipse Adoptium" (
          dir "C:\Program Files\Eclipse Adoptium" /b
        )
        if exist "C:\Program Files\Java" (
          dir "C:\Program Files\Java" /b
        )
      )
      echo.
      
      echo === Maven Detection ===
      mvn -version 2>nul && (
        echo Maven found successfully
      ) || (
        echo WARNING: Maven not found in PATH
        echo Checking Chocolatey Maven...
        if exist "C:\ProgramData\chocolatey\lib\maven" (
          dir "C:\ProgramData\chocolatey\lib\maven" /b
        )
        echo Checking common Maven locations...
        if exist "C:\Program Files\Apache" (
          dir "C:\Program Files\Apache" /b
        )
      )
      echo.
      
      echo === Chrome Detection ===
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        "C:\Program Files\Google\Chrome\Application\chrome.exe" --version
        echo Chrome found in Program Files
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --version
        echo Chrome found in Program Files (x86)
      ) else (
        echo WARNING: Chrome not found in standard locations
        echo Please ensure Chrome is installed
      )
      
      echo === PATH Analysis ===
      echo Relevant PATH entries:
      echo %PATH% | findstr /i "java maven chrome"
    displayName: 'Enhanced Prerequisites Verification'
    continueOnError: true
  
  # Setup browser environment for Windows self-hosted agent
  - script: |
      echo === Browser Environment Setup ===
      
      REM Check if Chrome is installed
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        echo Chrome found in Program Files
        set CHROME_PATH=C:\Program Files\Google\Chrome\Application\chrome.exe
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        echo Chrome found in Program Files (x86)
        set CHROME_PATH=C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
      ) else (
        echo Chrome not found in standard locations - please ensure Chrome is installed
        exit /b 1
      )
      
      echo Chrome executable: %CHROME_PATH%
      "%CHROME_PATH%" --version
      
      echo Browser environment ready for Windows agent
    displayName: 'Setup Browser Environment'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  
  # Build and execute tests using installed Maven
  - powershell: |
      Write-Host "=== Maven Build & Test Execution ==="
      
      # Set up Maven path
      $mavenPath = "C:\agent\maven\bin\mvn.cmd"
      if (-not (Test-Path $mavenPath)) {
          # Fallback to system Maven if available
          $mavenPath = "mvn"
      }
      
      Write-Host "Using Maven: $mavenPath"
      
      # Set up environment variables
      $env:MAVEN_OPTS = "-Xmx3072m -Dmaven.repo.local=$(Pipeline.Workspace)\.m2\repository"
      
      Write-Host "MAVEN_OPTS: $env:MAVEN_OPTS"
      Write-Host "Starting Maven build..."
      
      # Run Maven with explicit command
      if ($mavenPath -eq "mvn") {
          mvn clean test `
            -Dmaven.test.failure.ignore=true `
            -Dbrowser=chrome `
            -Dbrowser.headless=true `
            -Dwebdriver.chrome.whitelistedIps="" `
            -Dwebdriver.chrome.verboseLogging=false
      } else {
          & $mavenPath clean test `
            -Dmaven.test.failure.ignore=true `
            -Dbrowser=chrome `
            -Dbrowser.headless=true `
            -Dwebdriver.chrome.whitelistedIps="" `
            -Dwebdriver.chrome.verboseLogging=false
      }
      
      Write-Host "Maven execution completed with exit code: $LASTEXITCODE"
    displayName: 'Maven Build & Test (NetworkService Compatible)'
    env:
      JAVA_HOME: $(JAVA_HOME)
      PATH: C:\agent\maven\bin;$(PATH)
        -Dwebdriver.chrome.whitelistedIps=
        -Dwebdriver.chrome.verboseLogging=false
        -Dlog4j2.configurationFile=src/main/resources/log4j2.xml
        -Dmaven.javadoc.skip=true
        -Dmaven.source.skip=true
    continueOnError: true
  
  # OPTIMIZATION: Publish results only
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Tests'
  
  # OPTIMIZATION: Archive test reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Test Reports'
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/test-output'
      artifactName: 'extent-reports'
      publishLocation: 'pipeline'
  
  # Archive surefire reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Surefire Reports'  
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
      artifactName: 'surefire-reports'
      publishLocation: 'pipeline'
  
  # Archive logs (only on failure to save space)
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Logs'
    condition: failed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/logs'
      artifactName: 'application-logs'
      publishLocation: 'pipeline'
