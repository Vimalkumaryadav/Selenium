# Selenium TestNG Framework - Optimized Azure DevOps Pipeline
# Consolidated configuration optimized for free tier with minimal resource consumption

trigger:
- main

variables:
  # Maven optimization for Windows
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)\.m2\repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN'
  # Chrome path for Windows (will be detected dynamically)
  CHROME_PATH: 'C:\Program Files\Google\Chrome\Application\chrome.exe'

# Self-hosted agent configuration - Selenium Pool (Windows)
pool:
  name: 'Selenium Pool'
  demands:
  - agent.os -equals Windows_NT  # Specify Windows OS
  - java -equals 17              # Ensure Java 17 is available
  - maven                        # Ensure Maven is available
  - chrome                       # Ensure Chrome is available

jobs:
- job: SeleniumTests
  displayName: 'Selenium Framework CI/CD'
  timeoutInMinutes: 45  # Reduced from 60 to minimize free tier consumption
  strategy:
    maxParallel: 1  # Essential for free tier - DO NOT CHANGE
  
  steps:
  # OPTIMIZATION: Aggressive Maven dependency caching
  - task: Cache@2
    displayName: 'Cache Maven Dependencies'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml | "$(Build.SourceVersion)"'
      restoreKeys: |
        maven | "$(Agent.OS)" | **/pom.xml
        maven | "$(Agent.OS)"
      path: $(MAVEN_CACHE_FOLDER)
  
  # Verify agent prerequisites (Windows)
  - script: |
      echo === Agent Environment Verification ===
      echo Agent Name: $(Agent.Name)
      echo Agent OS: $(Agent.OS)
      echo Agent Version: $(Agent.Version)
      
      echo === Java Version ===
      java -version
      
      echo === Maven Version ===
      mvn -version
      
      echo === Chrome Version ===
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        "C:\Program Files\Google\Chrome\Application\chrome.exe" --version
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --version  
      ) else (
        echo Chrome not found in standard locations
      )
    displayName: 'Verify Agent Prerequisites'
  
  # Setup browser environment for Windows self-hosted agent
  - script: |
      echo === Browser Environment Setup ===
      
      REM Check if Chrome is installed
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        echo Chrome found in Program Files
        set CHROME_PATH=C:\Program Files\Google\Chrome\Application\chrome.exe
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        echo Chrome found in Program Files (x86)
        set CHROME_PATH=C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
      ) else (
        echo Chrome not found in standard locations - please ensure Chrome is installed
        exit /b 1
      )
      
      echo Chrome executable: %CHROME_PATH%
      "%CHROME_PATH%" --version
      
      echo Browser environment ready for Windows agent
    displayName: 'Setup Browser Environment'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  
  # Build and execute tests on self-hosted agent
  - task: Maven@3
    displayName: 'Build & Execute Tests'
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'  # Increased memory for self-hosted agent
      javaHomeOption: 'Path'
      jdkDirectory: '$(JAVA_HOME)'  # Use agent's JAVA_HOME
      publishJUnitResults: false
      goals: 'clean test'
      options: |
        -Dmaven.test.failure.ignore=true
        -Dbrowser=chrome
        -Dbrowser.headless=true
        -Dwebdriver.chrome.whitelistedIps=
        -Dwebdriver.chrome.verboseLogging=false
        -Dlog4j2.configurationFile=src/main/resources/log4j2.xml
        -Dmaven.javadoc.skip=true
        -Dmaven.source.skip=true
    continueOnError: true
  
  # OPTIMIZATION: Publish results only
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Tests'
  
  # OPTIMIZATION: Archive test reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Test Reports'
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/test-output'
      artifactName: 'extent-reports'
      publishLocation: 'pipeline'
  
  # Archive surefire reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Surefire Reports'  
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
      artifactName: 'surefire-reports'
      publishLocation: 'pipeline'
  
  # Archive logs (only on failure to save space)
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Logs'
    condition: failed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/logs'
      artifactName: 'application-logs'
      publishLocation: 'pipeline'
