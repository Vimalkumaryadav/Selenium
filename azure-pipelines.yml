# Selenium TestNG Framework - Optimized Azure DevOps Pipeline
# Consolidated configuration optimized for free tier with minimal resource consumption

trigger:
- main

variables:
  # Maven optimization
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN'
  # Test execution optimization
  CHROME_BIN: '/usr/bin/google-chrome'
  DISPLAY: ':99'

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: SeleniumTests
  displayName: 'Selenium Framework CI/CD'
  timeoutInMinutes: 45  # Reduced from 60 to minimize free tier consumption
  strategy:
    maxParallel: 1  # Free tier compatible
  
  steps:
  # OPTIMIZATION: Aggressive Maven dependency caching
  - task: Cache@2
    displayName: 'Cache Maven Dependencies'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml | "$(Build.SourceVersion)"'
      restoreKeys: |
        maven | "$(Agent.OS)" | **/pom.xml
        maven | "$(Agent.OS)"
      path: $(MAVEN_CACHE_FOLDER)
  
  # OPTIMIZATION: Use Java 17 (matches pom.xml) for better performance
  - task: JavaToolInstaller@0
    displayName: 'Setup Java 17'
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
  
  # OPTIMIZATION: Fast browser setup
  - script: |
      # Quick Chrome installation
      wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
      sudo apt-get update -qq
      sudo apt-get install -y google-chrome-stable
      # Start virtual display
      Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
      sleep 2
    displayName: 'Setup Browser Environment'
  
  # OPTIMIZATION: Combined build and test execution
  - task: Maven@3
    displayName: 'Build & Execute Tests'
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx2048m $(MAVEN_OPTS)'  # Reduced memory for free tier
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'clean test'
      options: |
        -Dmaven.test.failure.ignore=true
        -Dbrowser=chrome
        -Dbrowser.headless=true
        -Dwebdriver.chrome.driver=$(CHROME_BIN)
        -DDISPLAY=$(DISPLAY)
        -Dlog4j2.configurationFile=src/main/resources/log4j2.xml
        -Dmaven.javadoc.skip=true
        -Dmaven.source.skip=true
    continueOnError: true
  
  # OPTIMIZATION: Publish results only
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Tests'
  
  # OPTIMIZATION: Archive test reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Test Reports'
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/test-output'
      artifactName: 'extent-reports'
      publishLocation: 'pipeline'
  
  # Archive surefire reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Surefire Reports'  
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
      artifactName: 'surefire-reports'
      publishLocation: 'pipeline'
  
  # Archive logs (only on failure to save space)
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Logs'
    condition: failed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/logs'
      artifactName: 'application-logs'
      publishLocation: 'pipeline'
