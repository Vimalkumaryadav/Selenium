# Selenium TestNG Framework - Test Execution and Reporting Pipeline
# Comprehensive pipeline mirroring test-execution.yml workflow structure

trigger:
- main
- develop
- feature/*

pr:
- main
- develop

variables:
  # Environment configuration
  CI: true
  AZURE_PIPELINES: true
  
  # Maven configuration
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)\.m2\repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Xmx2048m'
  
  # Test execution parameters
  BROWSER_TYPE: 'chrome'
  HEADLESS_MODE: 'true'
  DRIVER_AUTO_DOWNLOAD: 'true'
  WEBDRIVERMANAGER_TIMEOUT: '60'

# Self-hosted agent pool configuration
pool:
  name: 'Selenium Pool'
  demands:
  - agent.os -equals Windows_NT

jobs:
- job: TestExecution
  displayName: 'Test Execution and Reporting'
  timeoutInMinutes: 60
  strategy:
    matrix:
      Chrome:
        browserType: 'chrome'
    maxParallel: 1
  
  steps:
  # Checkout Repository
  - checkout: self
    displayName: 'Checkout Repository'
    
  # Environment validation and setup
  - script: |
      echo === Test Execution Environment Setup ===
      echo Agent: $(Agent.Name)
      echo OS: $(Agent.OS)
      echo Build ID: $(Build.BuildId)
      echo Source Branch: $(Build.SourceBranchName)
      echo Browser: $(browserType)
      echo.
      
      echo === Dependency Verification ===
      java -version 2>nul && (
        echo ✅ Java Available
        echo JAVA_VERSION: && java -version
      ) || echo ❌ Java Missing
      
      mvn -version 2>nul && (
        echo ✅ Maven Available
        echo MAVEN_VERSION: && mvn -version
      ) || echo ❌ Maven Missing
      
      REM Chrome verification with detailed output
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        echo ✅ Chrome Available
        "C:\Program Files\Google\Chrome\Application\chrome.exe" --version
        set CHROME_BIN=C:\Program Files\Google\Chrome\Application\chrome.exe
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        echo ✅ Chrome Available ^(x86^)
        "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --version
        set CHROME_BIN=C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
      ) else (
        echo ❌ Chrome Missing
      )
      
      echo === Environment Variables ===
      echo CI: $(CI)
      echo AZURE_PIPELINES: $(AZURE_PIPELINES)
      echo BROWSER_TYPE: $(BROWSER_TYPE)
      echo HEADLESS_MODE: $(HEADLESS_MODE)
    displayName: 'Environment Setup and Validation'

  # Cache Maven dependencies
  - task: Cache@2
    displayName: 'Cache Maven Dependencies'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)" | **/pom.xml
        maven | "$(Agent.OS)"
      path: $(MAVEN_CACHE_FOLDER)

  # Cache WebDriver binaries
  - task: Cache@2
    displayName: 'Cache WebDriver Binaries'
    inputs:
      key: 'webdriver | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        webdriver | "$(Agent.OS)" | **/pom.xml
        webdriver | "$(Agent.OS)"
      path: $(Agent.HomeDirectory)\.cache\selenium

  # Chrome setup and verification
  - script: |
      echo === Chrome Setup and Verification ===
      
      REM Find Chrome executable
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        set CHROME_BIN=C:\Program Files\Google\Chrome\Application\chrome.exe
      ) else if exist "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" (
        set CHROME_BIN=C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
      ) else (
        echo Chrome executable not found
        exit /b 1
      )
      
      echo Using Chrome at: %CHROME_BIN%
      "%CHROME_BIN%" --version
      
      echo Testing Chrome headless mode...
      "%CHROME_BIN%" --headless --no-sandbox --disable-dev-shm-usage --disable-gpu --disable-web-security --dump-dom --virtual-time-budget=1000 https://www.google.com >nul 2>&1 && (
        echo ✅ Chrome headless test: PASSED
      ) || (
        echo ❌ Chrome headless test: FAILED
      )
    displayName: 'Verify Chrome Installation and Setup'

  # Clean previous test results
  - script: |
      echo === Cleaning Previous Test Results ===
      if exist "test-output" rmdir /s /q "test-output"
      if exist "target\surefire-reports" rmdir /s /q "target\surefire-reports"
      if exist "allure-results" rmdir /s /q "allure-results"
      echo Previous test results cleaned
    displayName: 'Clean Previous Test Results'

  # Run All Test Suites
  - task: Maven@3
    displayName: 'Run All Test Suites'
    timeoutInMinutes: 45
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'clean test'
      options: |
        -Dbrowser=$(browserType)
        -Dbrowser.headless=$(HEADLESS_MODE)
        -Ddriver.auto.download=$(DRIVER_AUTO_DOWNLOAD)
        -Dwebdrivermanager.timeout=$(WEBDRIVERMANAGER_TIMEOUT)
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      mavenVersionOption: 'Default'
      mavenOptions: '$(MAVEN_OPTS)'
    continueOnError: true

  # Display Test Results Summary
  - script: |
      echo === Test Results Summary ===
      if exist "target\surefire-reports" (
        echo Surefire reports found:
        dir target\surefire-reports\*.xml /b | find /c ".xml"
        
        REM Count test results (simplified for Windows)
        echo Analyzing test results...
        findstr /c:"failures=\"0\"" target\surefire-reports\*.xml >nul 2>&1 && echo Some tests passed
        findstr /c:"failures=" target\surefire-reports\*.xml | findstr /v "failures=\"0\"" >nul 2>&1 && echo Some tests failed
      )
      
      if exist "test-output\extent-reports" (
        echo ExtentReports found:
        dir test-output\extent-reports /b
      )
    displayName: 'Display Test Results Summary'
    condition: always()

  # Display Failed Test Details
  - script: |
      echo === TEST FAILURE ANALYSIS ===
      if exist "target\surefire-reports" (
        echo Test reports found:
        dir target\surefire-reports
        
        echo.
        echo === FAILED TEST DETAILS ===
        for %%f in (target\surefire-reports\*.xml) do (
          findstr /c:"failure" "%%f" >nul 2>&1 && (
            echo Failed tests in %%f:
            findstr /c:"failure" "%%f"
          )
        )
        
        echo.
        echo === TEXT REPORTS ===
        for %%f in (target\surefire-reports\*.txt) do (
          if exist "%%f" type "%%f"
        )
      )
      
      echo.
      echo === SYSTEM INFO ===
      if exist "C:\Program Files\Google\Chrome\Application\chrome.exe" (
        "C:\Program Files\Google\Chrome\Application\chrome.exe" --version
      )
      
      echo.
      echo === LOGS ===
      if exist "logs\automation.log" (
        echo Application logs ^(last 100 lines^):
        powershell -command "Get-Content 'logs\automation.log' -Tail 100"
      )
    displayName: 'Display Failed Test Details'
    condition: failed()

  # Generate ExtentReports validation
  - script: |
      echo === ExtentReports Generation Check ===
      if exist "test-output\extent-reports" (
        dir test-output\extent-reports /b
      ) else (
        echo No ExtentReports found
      )
    displayName: 'Generate ExtentReports Validation'
    condition: always()

  # Upload ExtentReports
  - task: PublishBuildArtifacts@1
    displayName: 'Upload ExtentReports'
    inputs:
      pathToPublish: 'test-output/extent-reports'
      artifactName: 'extent-reports-$(browserType)-$(Build.BuildId)'
      publishLocation: 'Container'
    condition: always()
    continueOnError: true

  # Upload Surefire Reports
  - task: PublishBuildArtifacts@1
    displayName: 'Upload Surefire Reports'
    inputs:
      pathToPublish: 'target/surefire-reports'
      artifactName: 'surefire-reports-$(Build.BuildId)'
      publishLocation: 'Container'
    condition: always()

  # Upload Screenshots on Failure
  - task: PublishBuildArtifacts@1
    displayName: 'Upload Screenshots on Failure'
    inputs:
      pathToPublish: 'test-output/extent-reports/screenshots'
      artifactName: 'failure-screenshots-$(Build.BuildId)'
      publishLocation: 'Container'
    condition: failed()
    continueOnError: true

  # Upload Test Logs
  - task: PublishBuildArtifacts@1
    displayName: 'Upload Test Logs'
    inputs:
      pathToPublish: 'logs'
      artifactName: 'test-logs-$(browserType)-$(Build.BuildId)'
      publishLocation: 'Container'
    condition: failed()

  # Publish Test Results to Azure DevOps
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Tests - $(browserType) - Build $(Build.BuildId)'
      buildPlatform: 'Windows'
      buildConfiguration: 'Release'
    condition: always()

  # Comment PR with Reports (for Pull Request builds)
  - task: PowerShell@2
    displayName: 'Generate PR Comment with Reports'
    inputs:
      targetType: 'inline'
      script: |
        if (Test-Path "test-output\extent-reports") {
          $reportFiles = Get-ChildItem "test-output\extent-reports" -Filter "*.html"
          
          if ($reportFiles.Count -gt 0) {
            Write-Host "## 📊 ExtentReports Generated"
            Write-Host ""
            Write-Host "**Browser:** $(browserType)"
            Write-Host "**Build:** $(Build.BuildId)"
            Write-Host ""
            Write-Host "📋 **Report Files:** $($reportFiles.Count)"
            Write-Host "📸 **Screenshots:** Available in artifacts"
            Write-Host ""
            Write-Host "**Download Links:**"
            Write-Host "- [📊 ExtentReports]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts)"
            Write-Host "- [📋 Surefire Reports]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts)"
            Write-Host ""
            Write-Host "**Test Results:** Download and open the HTML report files for detailed results."
          }
        }
    condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))

  # Prepare Reports Summary
  - task: PowerShell@2
    displayName: 'Prepare Reports Summary'
    inputs:
      targetType: 'inline'
      script: |
        $summary = @"
        ## 📊 Test Execution Summary
        
        **Build:** $(Build.BuildId)
        **Branch:** $(Build.SourceBranchName)
        **Commit:** $(Build.SourceVersion)
        **Date:** $(Get-Date)
        **Browser:** $(browserType)
        
        "@ 
        
        if (Test-Path "target\surefire-reports") {
          $summary += "`n### Surefire Test Results`n"
          $xmlFiles = Get-ChildItem "target\surefire-reports" -Filter "*.xml"
          foreach ($file in $xmlFiles) {
            $content = Get-Content $file.FullName -Raw
            if ($content -match 'tests="(\d+)".*failures="(\d+)".*errors="(\d+)".*skipped="(\d+)"') {
              $tests = $matches[1]
              $failures = $matches[2] 
              $errors = $matches[3]
              $skipped = $matches[4]
              $summary += "- **Tests:** $tests, **Failures:** $failures, **Errors:** $errors, **Skipped:** $skipped`n"
            }
          }
        }
        
        $summary += "`n### Report Files Available`n"
        if (Test-Path "test-output\extent-reports") {
          $summary += "**ExtentReports:**`n"
          $reportFiles = Get-ChildItem "test-output\extent-reports" -Filter "*.html"
          foreach ($report in $reportFiles) {
            $summary += "- $($report.Name)`n"
          }
        }
        
        $summary += @"
        
        ### How to Access Reports
        1. Go to [Build Results]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))
        2. Click on 'Artifacts' tab
        3. Download the report artifacts
        4. Extract and open HTML files in your browser
        
        ### 🔗 Quick Links
        - [📁 Build Artifacts]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts)
        - [📋 Test Results]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.build-test-results-tab)
        - [📊 Build Summary]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))
        "@
        
        Write-Host $summary
        
        # Write to build summary
        $summaryFile = "$(Agent.TempDirectory)\build-summary.md"
        $summary | Out-File -FilePath $summaryFile -Encoding UTF8
        Write-Host "##vso[task.uploadsummary]$summaryFile"
    condition: always()

  # Clean up workspace
  - script: |
      echo === Cleanup Temporary Files ===
      if exist "target\screenshots" rmdir /s /q "target\screenshots"
      if exist "target\temp" rmdir /s /q "target\temp"
      echo Cleanup completed
    displayName: 'Cleanup Temporary Files'
    condition: always()
    continueOnError: true

# Optional: Smoke Tests Job (runs in parallel for faster feedback)
- job: SmokeTests
  displayName: 'Execute Smoke Tests'
  dependsOn: [] # Run in parallel with main tests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')))
  timeoutInMinutes: 20
  
  steps:
  # Checkout Repository
  - checkout: self
    displayName: 'Checkout Repository'
  
  # Quick environment check
  - script: |
      echo === Smoke Test Environment Check ===
      echo Agent: $(Agent.Name)
      echo Build: $(Build.BuildId)
      java -version 2>nul && echo ✅ Java Available || echo ❌ Java Missing
      mvn -version 2>nul && echo ✅ Maven Available || echo ❌ Maven Missing
    displayName: 'Quick Environment Check'

  # Cache Maven dependencies
  - task: Cache@2
    displayName: 'Cache Maven Dependencies (Smoke Tests)'
    inputs:
      key: 'maven-smoke | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)" | **/pom.xml
        maven | "$(Agent.OS)"
      path: $(MAVEN_CACHE_FOLDER)

  # Clean previous results
  - script: |
      if exist "test-output" rmdir /s /q "test-output"
      if exist "target\surefire-reports" rmdir /s /q "target\surefire-reports"
    displayName: 'Clean Previous Results'

  # Execute smoke tests
  - task: Maven@3
    displayName: 'Execute Smoke Tests'
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'test'
      options: |
        -Dbrowser=chrome
        -Dbrowser.headless=true
        -Ddriver.auto.download=true
        -DsuiteXmlFile=src/test/resources/testng-suites/smoke-tests.xml
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      mavenVersionOption: 'Default'
      mavenOptions: '$(MAVEN_OPTS)'
    continueOnError: true

  # Upload smoke test artifacts
  - task: PublishBuildArtifacts@1
    displayName: 'Upload Smoke Test Reports'
    inputs:
      pathToPublish: 'test-output/extent-reports'
      artifactName: 'smoke-test-reports-$(Build.BuildId)'
      publishLocation: 'Container'
    condition: always()
    continueOnError: true

  # Publish smoke test results
  - task: PublishTestResults@2
    displayName: 'Publish Smoke Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
      testRunTitle: 'Smoke Tests - Build $(Build.BuildId)'
      failTaskOnFailedTests: false
    condition: always()