# Simplified Azure DevOps Pipeline for Selenium Tests
# This configuration uses only built-in Azure DevOps tasks to avoid marketplace dependencies

trigger:
- main

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: SeleniumTests
  displayName: 'Selenium Test Execution'
  timeoutInMinutes: 60
  strategy:
    maxParallel: 1  # Set to 1 for free tier
  
  steps:
  # Cache Maven dependencies
  - task: Cache@2
    displayName: 'Cache Maven packages'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: $(MAVEN_CACHE_FOLDER)
  
  # Setup Java 11
  - task: JavaToolInstaller@0
    displayName: 'Use Java 11'
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
  
  # Install Chrome browser
  - script: |
      sudo apt-get update
      sudo apt-get install -y google-chrome-stable
      google-chrome --version
    displayName: 'Install Chrome Browser'
  
  # Setup virtual display for headless testing
  - script: |
      export DISPLAY=:99
      Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
      sleep 3
      echo "Virtual display started on :99"
    displayName: 'Setup Virtual Display'
  
  # Build project
  - task: Maven@3
    displayName: 'Build Project'
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
      goals: 'clean compile'
  
  # Run tests
  - task: Maven@3
    displayName: 'Execute Selenium Tests'
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'test'
      options: |
        -Dmaven.test.failure.ignore=true
        -Dbrowser=chrome
        -Dbrowser.headless=true
        -Dwebdriver.chrome.driver=/usr/bin/google-chrome
        -DDISPLAY=:99
    continueOnError: true
  
  # Publish test results
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Tests - $(Build.BuildNumber)'
  
  # List generated files for debugging
  - script: |
      echo "=== Test Output Directory ==="
      if [ -d "test-output" ]; then
        find test-output -type f -name "*.html" -o -name "*.png" -o -name "*.log" | head -20
      else
        echo "test-output directory not found"
      fi
      
      echo "=== Surefire Reports ==="
      if [ -d "target/surefire-reports" ]; then
        ls -la target/surefire-reports/
      else
        echo "surefire-reports directory not found"  
      fi
    displayName: 'List Generated Files'
    condition: succeededOrFailed()
  
  # Archive test reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Test Reports'
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/test-output'
      artifactName: 'selenium-test-reports'
      publishLocation: 'pipeline'
  
  # Archive surefire reports
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Surefire Reports'
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
      artifactName: 'surefire-reports'
      publishLocation: 'pipeline'
  
  # Archive logs on failure
  - task: PublishPipelineArtifact@1
    displayName: 'Archive Logs'
    condition: failed()
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/logs'
      artifactName: 'application-logs'
      publishLocation: 'pipeline'